#NOP { /**
 *  @class  util
 *
 *  allgemeine Funktionen
 */}

#CLASS util KILL
#CLASS util OPEN

#ECHO {<029>-- <188>%s<288> geladen<099>} {common/util.tin}

#FUNCTION {char_repeat} {
    #FORMAT result {%+%2s} {};
    #REPLACE result { } {%1}
}

#NOP { /**
 *   @fn text_to_list
 *   @brief erstellt aus einer Aufzaehlung eine Liste
 *
 *   @param  1   Aufzaehlung
 *   @param  2   Regexp der zu suchenden Begriffe
 */};
#FUNCTION {text_to_list} {
    #VAR count {};
    #VAR result {};
    #VAR count[next] {%1};

    #WHILE {&count[next]} {
        #REGEXP {$count[next]} {{^ ?([^,]+)(,| und) (.+)}} {
            #VAR count[regex] &2;
            #VAR count[next] &4
        } {
            #VAR count[regex] $count[next];
            #UNVAR count[next]
        };
        #REGEXP {$count[regex]} {{%2}} {
            #LIST result ADD $count[regex]
        }
    };
    #RETURN $result
}

#ALIAS {calc} {
    #MATH {calc} {%0};
    #ECHO {%s = %s} {%0} {$calc}
}

#NOP - Variable %1 setzen oder %2 zu %1 addieren
#ALIAS {add} {
    #IF { &{%1} == 0 } {
        #VAR %1 {%2};
        #RETURN
    };
    #MATH %1 {${%1} + %2}
}

#NOP - Variable %1 um 1 erhoehen
#ALIAS {inc} {
    add %1 1
}

#NOP - Variable %1 um 1 erhoehen
#ALIAS {dec} {
    add %1 -1
}

#NOP - Die letzten %2 Zeichen von Text %1
#FUNCTION {tail} {
    #VAR result {%1};
    #REPLACE {result} {{.(?=.{%2})}} {};
}

#NOP - Die ersten %2 Zeichen von Text %1
#FUNCTION {head} {
    #VAR result {%1};
    #FORMAT {result} {%.%2s} {$result};
};

#NOP - Text %1 von Zeichen %2 bis Zeichen %3 vom Ende
#FUNCTION {substr} {
    #VAR {result} {%1};
    #FORMAT {len} {%L} {%1};
    #MATH {d} {$len - %2};
    #VAR {result} {@head{@tail{$result;$d};%3}};
};

#NOP - Text %1 von Zeichen %2 fuer die Laenge %3
#FUNCTION {slice} {
    #FORMAT slice_len %L {%1};
    #LOCAL a {%2};
    #LOCAL b {%3};
    #IF { $a < 0 } {
        #MATH a {$slice_len+$a};
    };
    #IF { $b < 0 } {
        #MATH b {$slice_len+$b};
    };
    #MATH slice_len {$b-$a+1};
    #VAR result {@substr{%1;$a;$slice_len}};
};

#NOP { /**
 *	@brief	Spaces rechts von einem Text mit . auffuellen
 */};
#FUNCTION {dotfill} {
    #VAR len %2;
    #VAR text %1;
    #FORMAT text_len %L $text;
    #IF { $text_len >= $len } {
        #FORMAT result {%.${len}s} {$text};
        #RETURN $result
    };
    #MATH len_diff {$len - $text_len};
    #IF { $len_diff == 1 } {
        #FORMAT result {%-${len}s} {$text};
        #RETURN $result
    };
    #MATH len_diff {$len_diff - 1};
    #FORMAT dot_pad {%+${len_diff}s} { };
    #REPLACE dot_pad { } {.};
    #FORMAT result {%s %s} {$text} {$dot_pad};
    #RETURN $result
}

#NOP { /**
 *	@brief	Spaces links von einem Text mit . auffuellen
 */};
#FUNCTION {dotfill_r} {
    #VAR len %2;
    #VAR text %1;
    #FORMAT text_len %L $text;
    #IF { $text_len >= $len } {
        #FORMAT result {%.${len}s} {$text};
        #RETURN $result
    };
    #MATH len_diff {$len - $text_len};
    #IF { $len_diff == 1 } {
        #FORMAT result {%+${len}s} {$text};
        #RETURN $result
    };
    #MATH len_diff {$len_diff - 1};
    #FORMAT dot_pad {%+${len_diff}s} { };
    #REPLACE dot_pad { } {.};
    #FORMAT result {%s %s} {$dot_pad} {$text};
    #RETURN $result
}

#NOP { /**
 *	@brief	0/1 als Parameter in farbiges an/aus umwandeln
 */};
#FUNCTION {an_aus} {
    #IF { ${%0} == 1 } {
        #RETURN <229>an<099>
    };
    #ELSEIF { ${%0} == 0 } {
        #RETURN <219>aus<099>
    };
    #ELSEIF { "${%0}" == "" } {
        #RETURN <219>aus<099>
    };
    #ELSEIF { &{%0} == 0 } {
        #RETURN <219>aus<099>
    };
    #ELSE {
        #RETURN ${%0}
    }
}

#NOP { /**
 *	@brief	0 oder 1 zurueck geben, wenn var gesetzt oder nicht vorhanden ist
 */};
#FUNCTION {_an_aus} {
    #IF { ${%0} == 1 } {
        #RETURN 1
    };
    #ELSEIF { ${%0} == 0 } {
        #RETURN 0
    };
    #ELSEIF { "${%0}" == "" } {
        #RETURN 0
    };
    #ELSEIF { &{%0} == 0 } {
        #RETURN 0
    };
    #ELSE {
        #RETURN 1
    }
}

#NOP { /**
 *	@brief	Variable zwischen 0 und 1 togglen und ggf setzen
 */};

#ALIAS {toggle_var} {
    #IF { ${%0} == 1 } {
        #VAR %0 0
    };
    #ELSEIF { ${%0} == 0 } {
        #VAR %0 1
    };
    #ELSEIF { "${%0}" == "" } {
        #VAR %0 1
    };
    #ELSEIF { &{%0} == 0 } {
        #VAR %0 1
    }
}

#NOP { /**
 *	@brief	Farbige Hervorhebung f端r Debug Ausgaben
 */};

#ALIAS {debug_msg} {
    #ECHO {<cba>DEBUG:<099> %1} {%2};
} {5};

#NOP { /**
 *	@brief	Timerfunktion zur Zeitmessung zwischen zwei Ereignissen
 *
 *  Die Ausgabe des Timers per Ticker erfolgt nur bei Panelgroessen von 2 oder
 *  3, also nicht in der 1-Panel-Version (mobil).
 */}

#NOP { /**
 *	@brief	startet die Zeitmessung
 */};

#ALIAS {timer_start} {
    #FORMAT timer[%1][start] %T;
    #VAR timer[%1][aktiv] 1;
    #VAR timer[%1][end_proj] 0;
    #IF { "%2" != "" } {
        #MATH timer[%1][end_proj] {$timer[%1][start] + %2};
        #DELAY timer_%1 {
            timer_end %1
        } {%2}
    };
    timer_ausgabe;
    #TICKER {timer_show} {
        timer_ausgabe
    } {1}
}

#NOP { /**
 *	@brief	schaetzt eine moegliche Endzeit ab
 *
 *  Wenn eine bestimmte Meldung erscheint, kann z.b. bei Barden die Endzeit
 *  abgeschaetzt werden.
 */};

#ALIAS {timer_med} {
    #FORMAT jetzt %T;
    #MATH timer[%1][end_proj] {($jetzt - $timer[%1][start]) / 3 * 4 + $timer[%1][start]};
}

#NOP { /**
 *	@brief	beendet einen Timer
 */};

#ALIAS {timer_end} {
    #VAR timer[%1][aktiv] 0;
    #FORMAT timer[%1][end] %T;
    #MATH timer[%1][dauer] {$timer[%1][end] - $timer[%1][start]};
    #LIST timer[%1][verlauf] ADD $timer[%1][dauer];
    #VAR timer_tmp $timer;
    #LIST timer_tmp INDEXATE aktiv;
    #LIST timer_tmp FILTER 1;
    #IF { &timer_tmp[] < 1 } {
        #UNTICKER {timer_show}
    };
    #IF { $screen[panels] > 1 } {
        #ECHO {{%+58s} {$tabelle[bottom] - &timer_tmp[] - 1} {2}} { }
    }
};

#NOP { /**
 *	@brief	Restzeit bis auslaufen des Timers, wenn Ende geschaetzt wurde
 */};

#FUNCTION {timer_rest} {
    #FORMAT jetzt %T;
    #IF {   $timer[%1][aktiv] == 1 &&
            $timer[%1][end_proj] > 0 } {
        #MATH rest {$timer[%1][end_proj] - $jetzt}
    };
    #ELSE {
        #VAR rest {0}
    };
    #RETURN $rest
}

#NOP { /**
 *	@brief	Ausgabe aller laufenden Timer
 */};

#ALIAS {timer_ausgabe} {
    #IF { $screen[panels] == 1 } {
        #RETURN
    };

    #IF { &{timer} == 0 } {
        #RETURN
    };

    #FORMAT jetzt %T;
    #VAR timer_zeiger 0;
    #VAR timer_tmp $timer;
    #LIST timer_tmp INDEXATE aktiv;
    #LIST timer_tmp FILTER 1;
    #FOREACH {*timer_tmp[%*]} {item} {
        #MATH timer_zeiger {$timer_zeiger + 1};
        #ECHO {{%+7s: %t (%t)} {$tabelle[bottom] - $timer_zeiger} {2}}
            {$item}
            {{%Mm %Ss}{$jetzt - $timer[$item][start]}}
            {{%Mm %Ss}{@timer_rest{$item}}}
    }
}

#NOP { /**
 *	@brief	Beendet alle laufenden Timer
 */};

#ALIAS {timer_kill} {
    #IF { &{timer} == 0 } {
        #RETURN
    };

    #FORMAT jetzt %T;
    #VAR timer_zeiger 0;
    #VAR timer_tmp $timer;
    #LIST timer_tmp INDEXATE aktiv;
    #LIST timer_tmp FILTER 1;
    #FOREACH {*timer_tmp[%*]} {item} {
        timer_end $item;
        #UNTICKER timer_$item
    }
}

#NOP { /**
 *	@brief	Tabelle mit bisher gesprochenen Bardenliedern mit Anzahl und Dauer
 */};

#VAR TITLE {lied;anzahl;dauer;min;max;avg}

#VAR tabelle {
    {bottom} {-6}
    {links} {1}
}

#ALIAS {test_ausgabe}
{
    #FOREACH {*barden[%*]} {test_item}
    {
        #VAR barden[$test_item][min] @test_min{{$barden[$test_item][verlauf]}};
        #VAR barden[$test_item][max] @test_max{{$barden[$test_item][verlauf]}};
        #VAR barden[$test_item][avg] @test_avg{{$barden[$test_item][verlauf]}};
        #VAR barden[$test_item][anzahl] &barden[$test_item][verlauf][%*];
        #IF { &barden[$test_item][offset] } {
            #MATH barden[$test_item][anzahl] {$barden[$test_item][anzahl] + $barden[$test_item][offset]}
        };
        #VAR barden[$test_item][lied] {$test_item}
    };

    #MATH tabelle[zeiger] {$tabelle[bottom] - &barden[%*] - 2};

    spaltenbreite;
    #ECHO {{@spaltenkoepfe{}} {$tabelle[zeiger]} {$tabelle[links]}};
    #MATH tabelle[zeiger] {$tabelle[zeiger] + 1};
    #ECHO {{@abgrenzung{}} {$tabelle[zeiger]} {$tabelle[links]}};
    #MATH tabelle[zeiger] {$tabelle[zeiger] + 1};
    zeilenausgabe;
}

#NOP { /**
 *	@brief	Minimum einer Liste zur端ckgeben
 *
 *  @param  Listenname
 */};

#FUNCTION {test_min} {
    #LIST tmp_test_list COPY {%1};
    #LIST tmp_test_list ORDER;
    #RETURN $tmp_test_list[+1]
}

#NOP { /**
 *	@brief	Maximum einer Liste zur端ckgeben
 *
 *  @param  Listenname
 */};

#FUNCTION {test_max} {
    #LIST tmp_test_list COPY {%1};
    #LIST tmp_test_list ORDER;
    #RETURN $tmp_test_list[-1]
}

#NOP { /**
 *	@brief	Durchschnitt einer Liste zur端ckgeben
 *
 *  @param  Listenname
 */};

#FUNCTION {test_avg} {
    #LIST tmp_test_list COPY {%1};
    #VAR sum 0;
    #FOREACH {$tmp_test_list[%*]} {item} {
        #MATH sum {$sum + $item}
    };
    #MATH avg {$sum / &tmp_test_list[%*]};
    #RETURN $avg
}

#NOP { /**
 * Maximallaenge der einzelnen Eintraege pro Spalte ermitteln
 *
 * TODO: Maximallaenge beim Eintragen oder Aendern von
 *       Eintraegen basierend auf den neuen Werten setzen
 */};
#ALIAS {spaltenbreite} {
    #FOREACH {$TITLE} {item} {
        #FORMAT {length} {%L} {$item};
        #FORMAT {column_width[$item]} {$length}
    };
    #FOREACH {$barden[%*]} {zeile} {
        #FOREACH {*zeile[]} {item} {
            #FORMAT length %L $zeile[$item];
            #IF { $length > $column_width[$item] } {
                #VAR column_width[$item] $length
            }
        }
    }
}

#FUNCTION {spaltenkoepfe} {
    #NOP /* Spaltenkoepfe ausgeben */;
    #VAR format {};
    #FOREACH {$TITLE} item {
        #IF { "$format" == "" } {
            #FORMAT format { %-$column_width[$item]n } {$item}
        };
        #ELSE {
            #FORMAT format {%s| %-$column_width[$item]n } {$format} {$item}
        }
    };
    #RETURN $format
}

#FUNCTION {abgrenzung} {
    #NOP /* Abgrenzungslinie ausgeben */;
    #VAR format {};
    #FOREACH {$TITLE} item {
        #MATH length {$column_width[$item] + 2};
        #IF {{$format} != {}} {
            #VAR format {$format+}
        };
        #LOOP {1} {$length} loop {
            #VAR format {$format-}
        }
    };
    #RETURN $format
}

#NOP { /**
 *   Einzelne Zeilen mit Inhalt ausgeben
 *   - \u2500
 *   | \u2502
 *   + \u253c
 **/};
#ALIAS {zeilenausgabe} {
    #VAR format {};
    #FOREACH *barden[%*] index {
        #FOREACH {$TITLE} item {
            #IF { "$item" == "lied" } {
                #FORMAT format { %-$column_width[$item]n } {$index}
            };
            #ELSEIF { "$item" == "{vnum|kill}" } {
                #FORMAT format {%s| %+$column_width[$item]s } {$format} {$barden[$index][$item]}
            };
            #ELSE {
                #FORMAT format {%s| %-$column_width[$item]n } {$format} {$barden[$index][$item]}
            }
        };
        #NOP #ECHO {$format};
        #ECHO {{$format} {$tabelle[zeiger]} {$tabelle[links]}};
        #MATH tabelle[zeiger] {$tabelle[zeiger] + 1}
    }
}

#FUNCTION {swap_state} {
    #VAR result {%1};
    #IF { "%2" == "{on|1}" } {
        #REPLACE result {$color_inactive} {$color_active};
    };
    #ELSEIF { "%2" == "{off|0}" } {
        #REPLACE result {$color_active} {$color_inactive};
    };
    #ELSEIF { "$result" == "${color_inactive}%+" } {
        #REPLACE result {$color_inactive} {$color_active};
    };
    #ELSE {
        #REPLACE result {$color_active} {$color_inactive};
    };
    #RETURN {$result}
} {5};

#FUNCTION {check_state} {
    #VAR result {0};
    #IF { "%1" == "${color_active}%+" } {
        #VAR result {1}
    };
    #RETURN {$result}
}

#NOP { /**
 *	@brief	check for differences before changing the variable
 */};
#ALIAS {check_diff} {
    #IF { "${%1}" == "%2" } {
        #RETURN
    };
    #VAR check_diff {1};
    #VAR %1 {%2}
} {5};

#NOP { /**
 *	@brief	sucht Text in Argumenten und gibt darauffolgenden Index zur端ck
 *
 *  Setzt voraus, dass die Argumente vorher mit '#info arguments save'
 *  gespeichert wurden. Da Argumente bei 0 beginnen, muss f端r das darauffolgende
 *  Argument nichts addiert werden. Der Suchtreffer hat bereits Index+1.
 */};
#FUNCTION {get_arg_value} {
    #LIST {info[ARGUMENTS]} FIND {%1} {tmp_index};
    #IF { $tmp_index == 0 } {
        #MATH {tmp_index} {&info[ARGUMENTS][] + 1};
    };
    #RETURN {$tmp_index}
};

#ALIAS {list_add} {
    #LIST %1 ADD ${%2[]}
}

#ALIAS {list_insert} {
    #VAR tmp_index %1;
    #IF { %1 < 0 } {
        #MATH tmp_index { %1 + &{%2[]} + 1 }
    };
    #LIST tmp_list COPY %2;
    #LIST %2 DEL -&{%2[]}+$tmp_index-1 &{%2[]}-$tmp_index+1;
    #IF { $tmp_index > 1 } {
        #LIST tmp_list DEL 1 $tmp_index-1;
    };
    #LIST %2 ADD ${%3[]};
    #LIST %2 ADD $tmp_list[];
} {5};

#ALIAS {list_split} {
    #NOP ;
} {5};

#CLASS util CLOSE