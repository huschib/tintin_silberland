#NOP { /**
 *  @class  wald
 *  @brief  Sachen nuetzlich im Wald der Waelder
 */}

#CLASS wald KILL
#CLASS wald OPEN

#ECHO {<029>-- <188>%s<288> geladen<099>} {region/wald.tin}

#VAR room_bound {}

#EVENT {MAP ENTER ROOM 1000}
{
    #MAP READ maps/silberland.map;
    #MAP GOTO wald;
    #CLASS wald KILL
}

#ALIAS {waldhilfe} {
    #VAR waldhilfe_text
    {
Der Wald, unendliche Weiten ...\n\n
Folgende Befehle sind im Wald moeglich:\n
waldrunde   ... laeuft automatisch alle Raeume im Wald ab\n
waldgrenzen ... setzt die Ausmasse der aktuellen Waldkarte\n
explore     ... startet den Aufzeichnungsmodus fuer eine neue Waldkarte\n
\n
weiters sind noch folgende Befehle nutzbar:\n
setwaldtoolbar ... setzt vorbestimmte Tasten in der Toolbar\n
waldnext       ... geht in den naechsten Raum der Raumliste\n
waldprev       ... geht in den vorherigen Raum der Raumliste\n
wgo            ... erweitertes, waldspezifisches 'go'-Kommando
    };
    #REPLACE {waldhilfe_text} {\\n } {\n}; 
    #ECHO {%s} {$waldhilfe_text}
}

#ALIAS {setwaldtoolbar} {
    #ECHO { -> Setze Wald Toolbar.};
    addfun 9 {naechster R.} {waldnext};
    addfun 10 {vorheriger R.} {waldprev};
    addfun 11 {Baum faellen} {
        #SEND {zuecke axt};
        #SEND {faelle baum};
        #SEND {zuecke keule};
        #SEND {nimm holzstueck}
    }
}

#ALIAS {waldnext} {
    #MATH tmp {$waldrunde[raum] + 1};
    #IF {$tmp > $waldrunde[max_raum]} {
        #ECHO {Letzten Raum bereits erreicht!}
    };
    #ELSE {
        wgo $tmp
    }
}

add_help {waldnext} {wald}
    {Geht zum naechsten Raum in der Waldrunde}
    {waldnext}

#ALIAS {waldprev} {
    #MATH tmp {$waldrunde[raum] - 1};
    wgo $tmp
}

add_help {waldprev} {wald}
    {Geht zum vorherigen Raum in der Waldrunde zurueck}
    {waldprev}

#ALIAS {wgo} {
    go %0;
    #VAR waldrunde[raum] %0;
    #MATH complete {$waldrunde[raum].00 / $waldrunde[max_raum].00 * 100};
    #REGEXP $complete {{([0-9]+)\.[0-9]+}} {
        #VAR waldrunde[komplett] &2
    };
    #ECHO {<188>[%n]<099> Raum %s - %s%%}
        {$waldrunde[verb]} {$waldrunde[raum]} {$waldrunde[komplett]};
    #IF {&waldrunde[toeten]} {
        tal
    }
}

add_help {wgo} {wald}
    {Geht zum angegebenen Raum im Wald}
    {wgo <Raumnummer>}

#ALIAS {waldrunde} {
    #IF {"%0" == "t"} {
        #IF {&waldrunde[toeten]} {
            #ECHO {erkunde nun den Wald ...};
            #VAR waldrunde[verb] erkunde;
            #UNVAR waldrunde[toeten]
        };
        #ELSE {
            #ECHO {toete nun alles im Wald ...};
            #VAR waldrunde[verb] leere;
            #VAR waldrunde[toeten] {}
        }
    };
    #ELSEIF {"%0" == "a"} {
        #IF {&waldrunde[groesse] && ($waldrunde[raum] >= $waldrunde[groesse])} {
            #ECHO {Letzten Raum bereits erreicht, gehe zum ersten Raum zurueck.};
            #VAR waldrunde[raum] 0;
            waldnext;
            #RETURN
        };
        #IF {&waldrunde[auto]} {
            #ECHO {Automatische Waldrunde in Raum $waldrunde[raum] unterbrochen.};
            #UNDELAY {waldnext};
            #UNACTION {{^(erkunde|leere) jetzt: Raum [0-9]+$}};
            #UNVAR waldrunde[auto];
            #RETURN
        };
        #ECHO {Starte automatische Waldrunde ...};
        #VAR waldrunde[auto] {};
        #DELAY {waldnext} {waldnext} {2};
        #UNVAR tmp;
        #MAP LIST {variable} {tmp};
        #VAR waldrunde[groesse] *tmp[-2];
        #ACTION {{^(erkunde|leere) jetzt: Raum [0-9]+$}} {
            #IF {$waldrunde[raum] == $waldrunde[groesse]} {
                #ECHO {Alle Raeume absolviert.};
                #UNACTION {{^(erkunde|leere) jetzt: Raum [0-9]+$}};
                #UNVAR waldrunde[auto];
                #RETURN
            };
            #DELAY {waldnext} {waldnext} {2}
        }
    };
    #ELSEIF {{%0} == {}} {
        #ECHO {beginne Waldrunde ...};
        #VAR waldrunde[raum] 0;
        #MAP LIST {VARIABLE} {tmp} {ROOMDESC} {ende};
        #VAR waldrunde[max_raum] *tmp[+1];
        #IF {!&waldrunde[verb]} {
            #VAR waldrunde[verb] erkunde
        }
    };
    #ELSE {
        #ECHO {Anwendung: waldrunde [Option]};
        #ECHO {};
        #ECHO {Drehe Runden durch den Wald.};
        #ECHO {};
        #ECHO {ohne Argument wird die Runde auf Raum 1 gesetzt};
        #ECHO {};
        #ECHO {  a      Toggle, starte/stoppe automatische Runden};
        #ECHO {  t      Toggle, toete alle Tiere beim Betreten eines Raumes};
        #RETURN
    }
}

add_help {waldrunde} {wald}
    {Startet eine neue Waldrunde}
    {waldrunde [a|t]}

#ALIAS {waldlauf}
{
    #IF {{%0} == {start}}
    {
        #ECHO {start ...};
        #MAP GET {roomvnum} {room};
        #MAP LIST {roomnote} {%*} {variable} {unbesucht};
        #LIST unbesucht DEL -1;
        #FOREACH *unbesucht[%*] loop
        {
            #IF {{$loop} == {$room}}
            {
                #CONTINUE
            };
            #MAP AT $loop #MAP SET ROOMNOTE unbesucht
        };
        #MAP SET ROOMNOTE {};
        #MAP FIND {roomnote} {unbesucht}
    };
    #IF {{%0} == {next}}
    {
        #PATH GET length pathlength;
        #IF {$pathlength == 0}
        {
            #ECHO {Alle besucht.};
            #RETURN
        };
        #MAP LIST {roomnote} {unbesucht} {variable} {tmp_unbesucht};
        #MATH wald_percent {(1 + &unbesucht[] - &tmp_unbesucht[]) * 100 / &unbesucht[]};
        #MATH wald_fortschritt {1 + &unbesucht[] - &tmp_unbesucht[]};
        #DELAY 0.5
        {
                #ECHO {Fortschritt: $wald_fortschritt/&unbesucht[] ( $wald_percent%% )};
        };
        #PATH RUN;
        #MAP SET ROOMNOTE {};
        #MAP FIND {roomnote} {unbesucht}
    }
}

add_help {waldlauf} {wald}
    {Startet eine neue Waldrunde}
    {waldlauf [start|next]}

#ALIAS {waldgrenzen} {
    #SWITCH {"%0"} {
        #CASE {"{[0-9]+x[0-9]+}"} {
            #ECHO {Ausmasse auf %0 gesetzt.};
            #REGEXP {%0} {{^([0-9]+)x([0-9]+)$}} {
                #VAR room_bound[x] &2;
                #VAR room_bound[y] &3
            }
        };
        #CASE {""} {
            #ECHO {Ausmasse: ${room_bound[x]}x${room_bound[y]}}
        };
        #DEFAULT {
            #ECHO {Anwendung: waldgrenzen <breite>x<hoehe>}
        }
    }
}

add_help {waldgrenzen} {wald}
    {Setzt vor der Erkundung die Dimensionen des Waldes}
    {waldgrenzen <Breite>x<Hoehe>}

#ALIAS {explore}
{
    #NOP { /**
     *  @fn     explore
     *  @brief  Erstellen einer neuen Waldkarte
     *  @todo   während des Erkundens nur existierende Ausgänge zulassen
     *  @todo   
     */};
    #SWITCH {"%1"}
    {
        #CASE {"start"}
        {
            #ECHO {starte Erkundungsmodus ...};
            #VAR update_map[area] wald;
            set_waldgrenzen;
            #MAP CREATE;
            #MAP FLAG DIRECTION OFF;
            #MAP COLOR EXITS <bcb>;
            #MAP TERRAIN wald <aca>^ SPARSE;
            #MAP TERRAIN holz <dcb>+ NARROW;
            #MAP GOTO 1;
            #SEND {schau};
            #DELAY {1}
            {
                #MAP ROOMFLAG STATIC ON
            };
            #EVENT {MAP ENTER ROOM}
            {
                set_room %%0 %%1;
                suche_holz;
                map_enter_room
            };
            #EVENT {MAP CREATE ROOM}
            {
                wald_map_create_room %%0
            };
            #VAR room_grid {{x}{1}{y}{1}};
            #IF {&room_bound[] == 0}
            {
                #VAR room_bound {{x}{20}{y}{20}}
            };
            #VAR room_visited {{1}{1}};
            #FORMAT room_name {wald_%+2s_%+2s} {$room_grid[x]} {$room_grid[y]};
            #REPLACE room_name { } {0};
            #MAP SET ROOMNAME {$room_name};
            #MAP SET ROOMSYMBOL A;
            #MAP DIG {q} {1000};
            #MAP EXIT q COMMAND {raus};
            modus_setzen wald
        };
        #CASE {"stop"}
        {
            modus_setzen;
            #ECHO {stoppe Erkundungsmodus ...};
            #EVENT {MAP ENTER ROOM} {map_enter_room};
            #UNEVENT {MAP CREATE ROOM};
            #MAP LIST {ROOMNAME} {%*} {VARIABLE} {tmp};
            #MAP AT *tmp[-2] #MAP SET ROOMDESC ende;
            #UNACTION {{^Es gibt .+ sichtbaren? Ausgae?nge?: (.+) ?$}};
            #UNVAR update_map[area];
            #VAR room_bound {};
            #MAP FLAG STATIC ON;
            #NOP { /** @todo  */};
            #MAP WRITE maps/wald.map
        };
        #CASE {"status"}
        {
            #MAP LIST {ROOMNOTE} {unbekannt} {VARIABLE} {room_notvisited};
            #IF {&room_notvisited[]}
            {
                #IF {&room_notvisited[] > 1}
                {
                    #ECHO {Es gibt noch %s unbesuchte Raeume im Wald.} {&room_notvisited[]}
                };
                #ELSE
                {
                    #ECHO {Es gibt nur noch einen unbesuchten Raum im Wald.}
                }
            };
            #ELSE
            {
                #ECHO {Du hast bereits alle Raeume im Wald besucht.}
            }
        };
        #DEFAULT
        {
            #ECHO {Anwendung: explore [Option]\n};
            #ECHO {Startet die Aufzeichnung einer neuen Karte im Wald.\n};
            #ECHO {  start      startet eine neue Aufzeichnung};
            #ECHO {  stop       stoppt die gegenwaertige Aufzeichnung};
            #ECHO {  status     Anzahl von unbesuchten Raeumen}
        }
    }
}

add_help {explore} {wald}
    {Startet oder speichert Erkundung des Waldes}
    {explore <start|stop|status>}

#ALIAS {set_waldgrenzen}
{
    #MAP LIST {roomdesc} {ausgang} {variable} {tmp};
    #ECHO {grenzen: *tmp[+2] *tmp[+1]};
    #IF {&tmp[] == 3}
    {
        #VAR room_bound[x] $tmp[+2][x];
        #VAR room_bound[y] $tmp[+1][y]
    }
}

#ALIAS {set_room} {
    #NOP #VAR wald_last_room %2;
    #VAR room_visited[%1] 1;
    #MAP SET ROOMTERRAIN wald;
    #MAP SET ROOMCOLOR;
    #MAP GET ROOMNAME roomname;
    #REGEXP {$roomname} {{wald_([0-9]+)_([0-9]+)}} {
        #VAR room_grid[x] &2;
        #VAR room_grid[y] &3
    };
    #MAP GET ROOMSYMBOL roomsymbol;
    #MAP GET ROOMNOTE roomnote;
    #IF {"$roomsymbol" == "?" && "$roomnote" == "unbekannt"}
    {
        #MAP SET ROOMSYMBOL;
        #MAP SET ROOMNOTE;
        #MAP ROOMFLAG STATIC ON
    };
}

#ALIAS {suche_holz}
{
    #ACTION {Ein Baum hier hat besonders schoenes Holz.}
    {
        #MAP SET ROOMTERRAIN holz;
        #LOCAL symbol {};
        #MAP GET ROOMSYMBOL symbol;
        #IF {{$symbol} != {A}}
        {
            #MAP SET ROOMSYMBOL <dcb>h
        };
        #NOP #MAP SET ROOMNOTE holz
    };
    
    #DELAY {0.5}
    {
        #UNACTION {Ein Baum hier hat besonders schoenes Holz.}
    };
    #SEND {sa baum}
}

#FUNCTION {query_room_name} {
    #VAR tmp_grid[x] $room_grid[x];
    #VAR tmp_grid[y] $room_grid[y];
    #SWITCH {"%0"} {
        #CASE {"o"} {
            #MATH tmp_grid[x] {$room_grid[x] + 1}
        };
        #CASE {"so"} {
            #MATH tmp_grid[x] {$room_grid[x] + 1};
            #MATH tmp_grid[y] {$room_grid[y] + 1}
        };
        #CASE {"s"} {
            #MATH tmp_grid[y] {$room_grid[y] + 1}
        };
        #CASE {"sw"} {
            #MATH tmp_grid[x] {$room_grid[x] - 1};
            #MATH tmp_grid[y] {$room_grid[y] + 1}
        };
        #CASE {"w"} {
            #MATH tmp_grid[x] {$room_grid[x] - 1}
        };
        #CASE {"nw"} {
            #MATH tmp_grid[x] {$room_grid[x] - 1};
            #MATH tmp_grid[y] {$room_grid[y] - 1}
        };
        #CASE {"n"} {
            #MATH tmp_grid[y] {$room_grid[y] - 1}
        };
        #CASE {"no"} {
            #MATH tmp_grid[x] {$room_grid[x] + 1};
            #MATH tmp_grid[y] {$room_grid[y] - 1}
        }
    };
    #IF {$tmp_grid[x] > $room_bound[x]} {
        #VAR tmp_grid[x] 1
    };
    #IF {$tmp_grid[y] > $room_bound[y]} {
        #VAR tmp_grid[y] 1
    };
    #IF {$tmp_grid[x] < 1} {
        #VAR tmp_grid[x] $room_bound[x]
    };
    #IF {$tmp_grid[y] < 1} {
        #VAR tmp_grid[y] $room_bound[y]
    };

    #FORMAT room_name {wald_%+2s_%+2s} {$tmp_grid[x]} {$tmp_grid[y]};
    #REPLACE room_name { } {0};

    #RETURN $room_name
}

#ALIAS {wald_map_create_room}
{
    #IF {%0 == 0}
    {
        #RETURN
    };
    #IF {!&room_visited[%0] && %0 != 1000} {
        #MAP SET ROOMNAME {@query_room_name{$wald_dir}} {%0};
        #MAP SET ROOMCOLOR {<bbb>} {%0};
        #MAP SET ROOMSYMBOL {?} {%0};
        #MAP SET ROOMNOTE {unbekannt} {%0}
    }
}

#ALIAS {modus_wald}
{
    #NOP #MAP GET ROOMEXITS raum_ausgaenge;
    wald_ausgaenge @text_to_list{$ausgaenge_lang;((nord|sued|west|ost)(en|westen|osten))};
    #REGEXP {$ausgaenge_lang} {raus}
    {
        #MAP SET ROOMDESC ausgang;
        #MAP SET ROOMSYMBOL A
    }
}

#ALIAS {wald_ausgaenge}
{
    #LOCAL tmp {%0};
    #FOREACH {$tmp[%*]} loop
    {
        #REGEXP {$loop} {{^(.).[^ow]+$}}
        {
            #VAR wald_dir &2
        };
        #REGEXP {$loop} {{^([ns]).+([ow]).+$}}
        {
            #VAR wald_dir &2&3
        };
        #MAP LIST {ROOMNAME} {@query_room_name{$wald_dir}} {VARIABLE} {raum_finden};
        #IF {*raum_finden[+1]}
        {
            #MAP LINK $wald_dir *raum_finden[+1] BOTH
        };
        #ELSE
        {
            #MAP DIG $wald_dir
        }
    };
    def_map_enter_room
}

#CLASS wald CLOSE

#NOP { /**
In einem Goblinlager mitten im Wald.
Mitten im Wald vor einem seltsamen Portal.
Auf einer idyllischen Lichtung mitten im Wald.
Beim Eingang zu einer Mine mitten im Wald.
*/}