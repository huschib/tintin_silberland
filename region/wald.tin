#NOP { /**
 *  @class  wald
 *  @brief  Sachen nuetzlich im Wald der Waelder
 */}

#CLASS wald KILL
#CLASS wald OPEN

#ECHO {<029>-- <188>%s<288> geladen<099>} {region/wald.tin}

#VAR region_map_create_room_function wald_map_create_room;
#VAR region_map_enter_room_function wald_map_enter_room;

#VAR room_bound {}
#VAR waldmodus
{
    {explore}   {0}
    {auto}      {0}
    {holz}      {0}
}

#EVENT {MAP ENTER ROOM 1000} {
    #MAP READ maps/silberland.map;
    #MAP GOTO wald;
    #VAR show_wald_navi 0;
    sidepanel_show;
    #CLASS wald KILL
}

#ALIAS {wald_map_enter_room} {
    #IF { @_an_aus{waldmodus[explore]} } {
        #VAR room_visited[%1] 1;
        #MAP SET ROOMTERRAIN wald;
        #MAP SET ROOMCOLOR;
        #MAP GET ROOMNAME roomname;
        #REGEXP {$roomname} {{wald_([0-9]+)_([0-9]+)}} {
            #VAR room_grid[x] &2;
            #VAR room_grid[y] &3
        };
        #MAP GET ROOMSYMBOL roomsymbol;
        #MAP GET ROOMNOTE roomnote;
        #IF {"$roomsymbol" == "?" && "$roomnote" == "unbesucht"}
        {
            #MAP SET ROOMSYMBOL;
            #MAP SET ROOMNOTE;
            #MAP ROOMFLAG STATIC ON
        }; 
    };
    #IF { @_an_aus{waldmodus[holz]} } {
        #SEND {schau baum}
    }


};

#ALIAS {wald_map_create_room} {
    #IF { %0 == 0 } {
        #RETURN
    };
    #IF { !&room_visited[%1] && %1 != 1000 } {
        #MAP SET ROOMNAME {@query_room_name{$wald_dir}} {%1};
        #MAP SET ROOMCOLOR {<bbb>} {%1};
        #MAP SET ROOMSYMBOL {?} {%1};
        #MAP SET ROOMNOTE {unbesucht} {%1}
    }
} {5};

#NOP { /**
 *  @fn     explore
 *  @brief  Erstellen einer neuen Waldkarte
 *
 *  @todo   während des Erkundens nur existierende Ausgänge zulassen
 *  @todo   Abbrechen ohne zu speichern
 *  @todo   Speicher Kommando
 *  @todo   Anzahl der unbesuchten Raeume wahrend des Erkundens
 */};

#ALIAS {explore} {
    #SWITCH { "%1" } {
        #CASE { "start" } {
            #ECHO {starte Erkundungsmodus ...};
            #VAR update_map[area] wald;
            #VAR room_grid {{x}{1}{y}{1}};
            #IF { &room_bound[] == 0 } {
                    #VAR room_bound {{x}{20}{y}{20}}
            };
            #VAR room_visited {{1}{1}};
            set_waldgrenzen;

            #MAP CREATE;
            #MAP FLAG DIRECTION OFF;
            #MAP COLOR EXITS <bcb>;
            #MAP TERRAIN wald <aca>^ SPARSE;
            #MAP TERRAIN holz <dcb>+ NARROW;
            #MAP AT 1 {
                #MAP SET ROOMNAME {wald_01_01};
                #MAP SET ROOMSYMBOL A;
                #MAP DIG {raus} {1000};
            };
            #MAP GOTO 1;
            #SEND {schau};
            #DELAY {1} {
                #MAP ROOMFLAG STATIC ON
            };
            #VAR waldmodus[explore] 1;
            
            modus_setzen wald
        };
        #CASE { "stop" } {
            modus_setzen;
            #ECHO {stoppe Erkundungsmodus ...};
            #VAR waldmodus[explore] 0;
            #UNVAR update_map[area];
            #VAR room_bound {};
            #MAP FLAG STATIC ON;
            #NOP { /** @todo  */};
            #MAP WRITE maps/wald.map
        };
        #CASE { "status" } {
            #MAP LIST {ROOMNOTE} {unbesucht} {VARIABLE} {room_notvisited};
            #IF { &room_notvisited[] } {
                #IF { &room_notvisited[] > 1 } {
                    #ECHO {Es gibt noch %s unbesuchte Raeume im Wald.} {&room_notvisited[]}
                };
                #ELSE {
                    #ECHO {Es gibt nur noch einen unbesuchten Raum im Wald.}
                }
            };
            #ELSE {
                #ECHO {Du hast bereits alle Raeume im Wald besucht.}
            }
        };
        #DEFAULT {
            #ECHO {Anwendung: explore [Option]\n};
            #ECHO {Startet die Aufzeichnung einer neuen Karte im Wald.\n};
            #ECHO {  start      startet eine neue Aufzeichnung};
            #ECHO {  stop       stoppt und speichert die gegenwaertige Aufzeichnung};
            #ECHO {  status     Anzahl von unbesuchten Raeumen}
        }
    }
}

add_help {explore} {wald}
    {Startet oder speichert Erkundung des Waldes}
    {explore <start|stop|status>}

#ALIAS {set_waldgrenzen} {
    #MAP LIST {roomdesc} {ausgang} {variable} {tmp};
    #ECHO {grenzen: $tmp[+2][x] $tmp[+1][y]};
    #IF { &tmp[] == 3 } {
        #VAR room_bound[x] $tmp[+2][x];
        #VAR room_bound[y] $tmp[+1][y]
    }
}

#FUNCTION {query_room_name} {
    #VAR tmp_grid[x] $room_grid[x];
    #VAR tmp_grid[y] $room_grid[y];
    #SWITCH { "%0" } {
        #CASE { "o" } {
            #MATH tmp_grid[x] {$room_grid[x] + 1}
        };
        #CASE { "so" } {
            #MATH tmp_grid[x] {$room_grid[x] + 1};
            #MATH tmp_grid[y] {$room_grid[y] + 1}
        };
        #CASE { "s" } {
            #MATH tmp_grid[y] {$room_grid[y] + 1}
        };
        #CASE { "sw" } {
            #MATH tmp_grid[x] {$room_grid[x] - 1};
            #MATH tmp_grid[y] {$room_grid[y] + 1}
        };
        #CASE { "w" } {
            #MATH tmp_grid[x] {$room_grid[x] - 1}
        };
        #CASE { "nw" } {
            #MATH tmp_grid[x] {$room_grid[x] - 1};
            #MATH tmp_grid[y] {$room_grid[y] - 1}
        };
        #CASE { "n" } {
            #MATH tmp_grid[y] {$room_grid[y] - 1}
        };
        #CASE { "no" } {
            #MATH tmp_grid[x] {$room_grid[x] + 1};
            #MATH tmp_grid[y] {$room_grid[y] - 1}
        }
    };
    #IF { $tmp_grid[x] > $room_bound[x] } {
        #VAR tmp_grid[x] 1
    };
    #IF { $tmp_grid[y] > $room_bound[y] } {
        #VAR tmp_grid[y] 1
    };
    #IF { $tmp_grid[x] < 1 } {
        #VAR tmp_grid[x] $room_bound[x]
    };
    #IF { $tmp_grid[y] < 1 } {
        #VAR tmp_grid[y] $room_bound[y]
    };

    #FORMAT room_name {wald_%+2s_%+2s} {$tmp_grid[x]} {$tmp_grid[y]};
    #REPLACE room_name { } {0};

    #RETURN $room_name
}

#ALIAS {modus_wald} {
    wald_ausgaenge @text_to_list{$ausgaenge_lang;((nord|sued|west|ost)(en|westen|osten))};
    #REGEXP {$ausgaenge_lang} {raus} {
        #MAP SET ROOMDESC ausgang;
        #MAP SET ROOMSYMBOL A
    }
}

#ALIAS {wald_ausgaenge} {
    #LOCAL tmp {%0};
    #FOREACH {$tmp[%*]} loop {
        #REGEXP {$loop} {{^(.).[^ow]+$}} {
            #VAR wald_dir &2
        };
        #REGEXP {$loop} {{^([ns]).+([ow]).+$}} {
            #VAR wald_dir &2&3
        };
        #MAP LIST {ROOMNAME} {@query_room_name{$wald_dir}} {VARIABLE} {raum_finden};
        #IF { *raum_finden[+1] } {
            #MAP LINK $wald_dir *raum_finden[+1] BOTH
        };
        #ELSE {
            #MAP DIG $wald_dir
        }
    };
    def_map_enter_room
}

#ALIAS {suche_holz} {
    #LINE ONESHOT {
        #ACTION {Ein Baum hier hat besonders schoenes Holz.} {
            #MAP SET ROOMTERRAIN holz;
            #LOCAL symbol {};
            #MAP GET ROOMSYMBOL symbol;
            #IF { "$symbol" != "A" } {
                #MAP SET ROOMSYMBOL <dcb>h
            };
            #NOP #MAP SET ROOMNOTE holz
        }
    };
    #SEND {schau baum}
}

#NOP { /**
 *	@brief	Laesst den Wald Schritt fuer Schritt oder automatisch ablaufen
 *
 *  @todo   automodus-Kommando das in jedem Raum ausgefuehrt wird
 */};

#ALIAS {wald_lauf} {
    #IF { "%0" == "start" } {
        #ECHO {start ...};
        #MAP GET {roomvnum} {room};
        #MAP LIST {roomnote} {%*} {variable} {unbesucht};
        #LIST unbesucht DEL -1;
        #FOREACH *unbesucht[%*] loop {
            #IF { "$loop" == "$room" } {
                #CONTINUE
            };
            #MAP AT $loop #MAP SET ROOMNOTE unbesucht
        };
        #MAP SET ROOMNOTE {};
        #MAP FIND {roomnote} {unbesucht};
        #ECHO {Fortschritt: 1/%d ( %m%% )} {&unbesucht[]} {100 / &unbesucht[]};
    };
    #IF { "%0" == "next" } {
        #PATH GET length pathlength;
        #IF {$pathlength == 0} {
            #ECHO {Alle besucht.};
            #RETURN
        };
        #MAP LIST {roomnote} {unbesucht} {variable} {tmp_unbesucht};
        #IF { @_an_aus{waldmodus[explore]} } {
            #MAP LIST {variable} {unbesucht};
            #LIST unbesucht DEL -1;
        };
        #MATH wald_percent {(1 + &unbesucht[] - &tmp_unbesucht[]) * 100 / &unbesucht[]};
        #MATH wald_fortschritt {1 + &unbesucht[] - &tmp_unbesucht[]};
        #PATH RUN {0.2};
        #VAR wald_tick_auto_skip 1;
        #EVENT {END OF RUN} {
            #DELAY {end_of_run} {
                #MAP SET ROOMNOTE {};
                #VAR wald_tick_auto_skip 0;
                #ECHO {Fortschritt: $wald_fortschritt/&unbesucht[] ( $wald_percent%% )};
                #MAP LIST {roomnote} {unbesucht} {variable} {tmp_unbesucht};
                #IF { &tmp_unbesucht[] > 0 } {
                    #MAP FIND {roomnote} {unbesucht}
                } #ELSE {
                    #UNTICKER {wald_auto};
                };
            } {0.5}
        };
    };
    #IF { "%0" == "auto" } {
        #IF { @_an_aus{waldmodus[auto]} } {
            #VAR waldmodus[auto] 0;
            #VAR wald_tick_auto_skip 0;
            #UNTICKER {wald_auto};
            #UNTICKER {end_of_run};
            #UNEVENT {END OF RUN};
            #ECHO {Wald wird nicht mehr automatisch abgelaufen.}
        };
        #ELSE {
            #VAR waldmodus[auto] 1;
            #TICKER {wald_auto} {
                #IF { @_an_aus{wald_tick_auto_skip} } {
                    #RETURN
                };
                wald_lauf next;
                #IF { &tmp_unbesucht[] == 0} {
                    wald_lauf auto;
                    #UNEVENT {END OF RUN}
                };
            } {2};
        }
    }
}

#ALIAS {waldlauf} {wald_lauf}

add_help {waldlauf} {wald}
    {Startet eine neue Waldrunde}
    {waldlauf [start|next|auto]}


#CLASS wald CLOSE

#NOP { /**
In einem Goblinlager mitten im Wald.
Mitten im Wald vor einem seltsamen Portal.
Auf einer idyllischen Lichtung mitten im Wald.
Beim Eingang zu einer Mine mitten im Wald.
*/}